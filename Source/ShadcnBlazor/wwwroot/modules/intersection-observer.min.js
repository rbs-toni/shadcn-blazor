var c="blazor_plugin_observer__",i=1,o=new Map;function h(){i=0,o.clear()}function g(){return o}function f(){return`${c}${i++}`}function u(e,n,t){let r=d(n),s=new IntersectionObserver(r,t);return o.set(n,{dotnetRef:e,observer:s,elements:[]}),o.get(n)}function m(e,n){let t=o.get(e);if(t==null)throw new Error(`Failed to observe element for key: ${e} as the observer does not exist`);if(t.elements.some(s=>s.element==n))return console.warn(`BlazorIntersectionObserver: The element is already being observed by observer for key ${e}`),"";let r=f();return t.observer.observe(n),t.elements.push({elementId:r,element:n}),r}function E(e,n,t){return u(e,n,t)}function R(e,n,t,r){return u(e,n,r),m(n,t)}function b(e,n){let t=o.get(e);if(t==null)throw new Error(`Failed to unobserve element for key: ${e} as the observer does not exist`);let r=t.elements.find(s=>s.element==n)?.elementId;return r==null&&console.warn(`BlazorIntersectionObserver: The record does not exist for observer: ${e}`),t.observer.unobserve(n),t.elements=t.elements.filter(s=>s.element!=n),r}function v(e){let n=o.get(e);if(n==null)throw new Error(`Failed to disconnect for key: ${e} as the observer does not exist`);return n.observer.disconnect(),n.elements=[],!0}function x(e){return v(e)?o.delete(e):!1}function l(e){function n(t){return t?{X:t.x,Y:t.y,Width:t.width,Height:t.height,Top:t.top,Left:t.left,Bottom:t.bottom,Right:t.right}:null}return{IsIntersecting:e.isIntersecting,IntersectionRatio:e.intersectionRatio,Time:e.time,BoundingClientRect:n(e.boundingClientRect),IntersectionRect:n(e.intersectionRect),RootBounds:n(e.rootBounds)}}function d(e){return n=>{if(!o.has(e))return;let{dotnetRef:t}=o.get(e),r=n.map(s=>l(s));t.invokeMethodAsync("OnCallback",e,r)}}export{E as create,v as disconnect,g as getObserverItems,R as observe,m as observeElement,x as remove,h as reset,b as unobserve};
