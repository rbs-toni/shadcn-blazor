@namespace ShadcnBlazor
@inherits ShadcnComponentBase
@typeparam TValue where TValue : System.Numerics.INumber<TValue>
@inject IElementService ElementService

<SliderImpl TValue="TValue"
            OnSlideStart="OnSlideStartHandler"
            OnSlideMove="OnSlideMoveHandler"
            OnSlideEnd="OnSlideEndHandler"
            OnStepKeyDown="OnStepKeyDownHandler"
            OnHomeKeyDown="OnHomeKeyDownHandler"
            OnEndKeyDown="OnEndKeyDownHandler"
            dir="@Direction.ToAttributeValue(false)"
            data-orientation="horizontal"
            Ref="Ref">
    @ChildContent
</SliderImpl>

@code {
    [CascadingParameter]
    SliderContext<TValue>? SliderContext { get; set; }

    [Parameter]
    public TValue? Min { get; set; }

    [Parameter]
    public TValue? Max { get; set; }

    [Parameter]
    public bool Inverted { get; set; }

    [Parameter]
    public Direction Direction { get; set; }

    void OnSlideStartHandler(PointerEventArgs args)
    {
    }
    void OnSlideMoveHandler(PointerEventArgs args)
    {
    }
    void OnSlideEndHandler(PointerEventArgs args)
    {
    }
    void OnStepKeyDownHandler(KeyboardEventArgs args)
    {
    }
    void OnHomeKeyDownHandler(KeyboardEventArgs args)
    {
    }
    void OnEndKeyDownHandler(KeyboardEventArgs args)
    {
    }

    bool IsSlidingFromLeft => (Direction == Direction.LTR && !Inverted) || (Direction != Direction.LTR && Inverted);
    string? StyleValue => new StyleBuilder()
        .AddStyle("--reka-slider-thumb-transform", "translateX(50%)", "translateX(-50%)", IsSlidingFromLeft == false && SliderContext?.ThumbAlignment == ThumbAlignment.Overflow)
        .Build();

    async Task GetValueFromPointerEvent(PointerEventArgs args, bool slideStart)
    {
        var rect = await ElementService.GetBoundingClientRectAsync(Ref);
    }
}