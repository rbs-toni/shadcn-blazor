@namespace ShadcnBlazor
@inherits ShadcnJSComponentBase

<Teleport If="_shouldTeleported" OnTeleported="OnTeleported" OnRemoved="OnRemoved">
    @if (CloseKeys != null && CloseKeys.Any())
    {
        // Button or AnchorId element
        if (!string.IsNullOrEmpty(AnchorId))
        {
            <ShadcnKeyCode AnchorId="@AnchorId"
                           Only="@CloseAndTabKeys"
                           OnKeyDown="@CloseOnKeyAsync"
                           PreventDefaultOnly="@(AutoFocus ? CloseAndTabKeys : CloseKeys)" />
        }
        // Popover content
        if (!string.IsNullOrEmpty(Id))
        {
            <ShadcnKeyCode AnchorId="@Id"
                           Only="@CloseAndTabKeys"
                           OnKeyDown="@CloseOnKeyAsync"
                           PreventDefaultOnly="@CloseAndTabKeys" />
        }
    }
    <Floating Id="@Id"
              AnchorId="@AnchorId"
              Side="@Side"
              Align="@Align"
              Strategy="FloatingStrategy.Fixed">
        <CascadingValue Value="_context" IsFixed="true">
            <PopoverContent OnAnimationEnd="OnAnimationEnd" Show="_teleported" Side="@_side">
                @ChildContent
            </PopoverContent>
        </CascadingValue>
    </Floating>
</Teleport>

@code {
    /// <summary>
    /// Gets or sets the id of the component the popover is positioned relative to.
    /// </summary>
    [Parameter, EditorRequired]
    public required string AnchorId { get; set; }

    /// <summary>
    /// Gets or sets popover opened state.
    /// </summary>
    [Parameter]
    public bool Open
    {
        get => _open;
        set
        {
            if (value != _open)
            {
                _open = value;
                if (_open)
                {
                    _shouldTeleported = true;
                }
                else if (_teleported)
                {
                    _context.Close();
                }
            }
        }
    }

    /// <summary>
    /// Callback for when open state changes.
    /// </summary>
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public FloatingSide Side { get; set; } = FloatingSide.Bottom;

    [Parameter]
    public FloatingAlign Align { get; set; } = FloatingAlign.Center;

    [Parameter]
    public bool Modal { get; set; }

    /// <summary>
    /// Gets or sets whether the element should receive the focus when the component is loaded.
    /// If this is the case, the user cannot navigate to other elements of the page while the Popup is open.
    /// Default is true.
    /// </summary>
    [Parameter]
    public bool AutoFocus { get; set; } = true;

    /// <summary>
    /// Gets or sets the keys that can be used to close the popover.
    /// By default, Escape
    /// </summary>
    [Parameter]
    public KeyCode[]? CloseKeys { get; set; } = [KeyCode.Escape];
}
