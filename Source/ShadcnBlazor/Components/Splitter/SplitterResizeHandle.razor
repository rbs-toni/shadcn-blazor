@namespace ShadcnBlazor
@inherits ShadcnComponentBase

<div id="@Id"
     ref="@Ref"
     style="@StyleValue"
     role="separator"
     data-resize-handle
     tabindex="@Tabindex"
     data-state="@_state.ToAttributeValue(false)"
     data-disabled="@Disabled"
     data-orientation="@GroupContext?.Direction.ToAttributeValue(false)"
     data-panel-group-id="@GroupContext?.GroupId"
     data-resize-handle-active="@DataResizeHandleActive"
     data-resize-handle-state="@_state.ToAttributeValue()"
     data-panel-resize-handle-enabled="@(!Disabled)"
     data-panel-resize-handle-id="@Id"
     @onblur="@(()=>_isFocused = false)"
     @onfocus="@(() => _isFocused = false)">
    <slot />
</div>

@code {
    string? DataResizeHandleActive => _state == ResizeHandleState.Drag ? "pointer" :
    _isFocused ? "keyboard" : null;
    string? StyleValue => new StyleBuilder(Style)
            .AddStyle("touch-action", "none")
            .AddStyle("user-select", "none")
            .Build();

    [Parameter]
    public PointerHitAreaMargins? HitAreaMargins { get; set; }

    [Parameter]
    public int Tabindex { get; set; } = 0;

    bool _disabled;

    [Parameter]
    public bool Disabled
    {
        get => _disabled; set
        {
            if (_disabled != value)
            {
                if (_disabled)
                {
                    _resizeHandler = null;
                }
                else
                {
                    _resizeHandler = GroupContext?.RegisterResizeHandle(Id);
                }
            }
        }
    }

    [Parameter]
    public EventCallback<bool> OnDragging { get; set; }

    [CascadingParameter]
    PanelGroupContext? GroupContext { get; set; }

    ResizeHandleState _state = ResizeHandleState.Inactive;
    bool _isFocused;
    ResizeHandler? _resizeHandler;

}