@namespace ShadcnBlazor
@inherits ShadcnComponentBase
@implements IDisposable
@inject TwMerge TwMerge

<div id="@Id"
     class="overflow-hidden @(TwMerge.Merge(ClassValue))"
     style="@Style"
     data-orientation="@Accordion?.Orientation.ToAttributeValue(false)"
     data-disabled="@IsDisabled"
     disabled="@IsDisabled"
     data-state="@OpenValue"
     @ref="Ref"
     @attributes="Attributes">
    <CascadingValue Value="_context" IsFixed="true">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [CascadingParameter]
    InternalAccordionContext? Accordion { get; set; }

    /// <summary>
    /// Whether or not an accordion item is disabled from user interaction. When `true`, prevents the user from interacting with the item.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    public bool IsDisabled => Accordion?.Disabled == true && Disabled;

    public bool Open => Accordion?.IsActive(this) ?? false;

    public string OpenValue => Open ? "open" : "closed";

    string? ClassValue => new CssBuilder(Class)
        .AddClass("border-b")
        .AddClass("group focus-visible:outline-none has-[:focus-visible]:ring-2 has-[:focus-visible]:ring-ring has-[:focus-visible]:ring-ring")
        .Build();

    protected override void OnInitialized()
    {
        if (Accordion != null)
        {
            Accordion.RegisterItem(this);
            Accordion.OnStateChanged += () => InvokeAsync(StateHasChanged);
        }
    }

    public void ToggleOpen()
    {
        if (!IsDisabled)
        {
            Accordion?.SetActiveItem(this);
        }
    }

    public async Task FocusAsync()
    {
        await _context.FocusAsync();
    }

    public void Dispose()
    {
        Accordion?.UnregisterItem(this);
    }
}
