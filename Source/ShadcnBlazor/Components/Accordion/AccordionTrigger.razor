@namespace ShadcnBlazor
@inherits ShadcnComponentBase
@inject TwMerge TwMerge

<AccordionHeader Class="flex">
    <button id="@AccordionItem?.TriggerId"
            class="@(TwMerge.Merge(ClassValue))"
            style="@Style"
            type="button"
            aria-disabled="@AccordionItem?.Disabled"
            aria-expanded="@AccordionItem?.Open"
            data-disabled="@AccordionItem?.Disabled"
            data-orientation="@Accordion?.Orientation.ToAttributeValue(false)"
            data-state="@AccordionItem?.DataState"
            disabled="@AccordionItem?.Disabled"
            @ref="Ref"
            @attributes="Attributes"
            @onclick="SetActiveItem"
            @onclick:preventDefault=true
            @onclick:stopPropagation=true>
        @ChildContent
        @if (ExpandIcon == null)
        {
            <LucideIcon Name="IconName.ChevronDown" Class="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
        }
        else
        {
            @ExpandIcon
        }
    </button>
</AccordionHeader>

@code {
    [CascadingParameter]
    InternalAccordionContext? Accordion { get; set; }

    [CascadingParameter]
    InternalAccordionItemContext? AccordionItem { get; set; }

    [Parameter]
    public RenderFragment? ExpandIcon { get; set; }

    string? ClassValue => new CssBuilder(Class)
        .AddClass("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180")
        .AddClass("focus:outline-none")
        .Build();

    void SetActiveItem()
    {
        if (AccordionItem != null && Accordion != null)
        {
            AccordionItem.SetActiveItem(Accordion);
        }
    }

    public async Task FocusAsync()
    {
        await Ref.FocusAsync();
    }

    protected override void OnInitialized()
    {
        if (AccordionItem != null)
        {
            AccordionItem.OnFocus += async () =>
            {
                await InvokeAsync(FocusAsync);
            };
        }
    }
}