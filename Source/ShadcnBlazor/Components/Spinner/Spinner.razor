@namespace ShadcnBlazor
@inherits ShadcnComponentBase
@inject TwMerge TwMerge
@switch (Variant)
{
    case SpinnerVariant.Default:
        <LucideIcon Id="@Id" Ref="Ref" Name="IconName.Loader" Style="@Style" Class="@TwMerge.Merge("animate-spin", Class)" @attributes="Attributes" />
        break;
    case SpinnerVariant.Circle:
        <LucideIcon Id="@Id" Ref="Ref" Name="IconName.Loader2" Style="@Style" Class="@TwMerge.Merge("animate-spin", Class)" @attributes="Attributes" />
        break;
    case SpinnerVariant.Pinwheel:
        <LucideIcon Id="@Id" Ref="Ref" Name="IconName.LoaderPinwheel" Style="@Style" Class="@TwMerge.Merge("animate-spin", Class)" @attributes="Attributes" />
        break;
    case SpinnerVariant.SwirlingEffect:
        <style>
            @@keyframes spin {
                to {
                    transform: rotate(360deg);
                }
            }

            @@keyframes spin2 {
                0% {
                    stroke-dasharray: 1, 800;
                    stroke-dashoffset: 0;
                }

                50% {
                    stroke-dasharray: 400, 400;
                    stroke-dashoffset: -200px;
                }

                100% {
                    stroke-dasharray: 800, 1;
                    stroke-dashoffset: -800px;
                }
            }

            .spin2 {
                transform-origin: center;
                animation: spin2 1.5s ease-in-out infinite, spin 2s linear infinite;
                animation-direction: alternate;
            }
        </style>
        <svg viewBox="0 0 800 800" class="h-14 w-14" xmlns="http://www.w3.org/2000/svg">
            <circle class="spin2 stroke-primary" cx="400" cy="400" fill="none" r="200" strokeWidth="50" strokeDasharray="700 1400" strokeLinecap="round" />
        </svg>
        break;
    case SpinnerVariant.Circle1:
        <div class="w-7 h-7 border-[3px] border-transparent border-t-primary rounded-full animate-spin" />
        break;
    case SpinnerVariant.Circle2:
        <div class="w-7 h-7 border-[3px] border-transparent border-t-primary border-r-primary rounded-full animate-spin" />
        break;
    case SpinnerVariant.Circle3:
        <div class="w-7 h-7 border-[3px] border-secondary border-t-primary rounded-full animate-spin" />
        break;
    case SpinnerVariant.Circle4:
        <div class="w-7 h-7 border-[3px] border-primary/10 border-t-primary border-b-primary rounded-full animate-spin" />
        break;
    case SpinnerVariant.Circle5:
        <div class="w-7 h-7 border-[3px] border-white border-t-primary border-b-primary rounded-full animate-spin" />
        break;
}

@code {
    [Parameter]
    public SpinnerVariant Variant { get; set; } = SpinnerVariant.Default;
}