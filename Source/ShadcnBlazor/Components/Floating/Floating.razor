@namespace ShadcnBlazor
@inherits ShadcnJSComponentBase
@inject TwMerge TwMerge

<div id="@Id"
     class="@(TwMerge.Merge(ClassValue))"
     style="@StyleValue"
     data-side="@Side.ToAttributeValue(false)"
     data-align="@Align.ToAttributeValue(false)"
     @ref="Ref"
     @attributes="Attributes">
    @ChildContent
</div>

@code {
    [Parameter]
    [EditorRequired]
    public required string AnchorId { get; set; }

    /// <summary>
    /// The preferred side of the trigger to render against when open.
    /// </summary>
    [Parameter]
    public FloatingSide Side { get; set; } = FloatingSide.Bottom;

    /// <summary>
    /// The preferred alignment against the trigger.
    /// </summary>
    [Parameter]
    public FloatingAlign Align { get; set; } = FloatingAlign.Center;

    [Parameter]
    public FloatingStrategy Strategy
    {
        get => _strategy; set
        {
            if (_strategy == value)
            {
                return;
            }
            _strategy = value;
            if (JSAvailable && !string.IsNullOrWhiteSpace(Id))
            {
                InvokeAsync(ChangeOptionsAsync);
            }
        }
    }

    [Parameter]
    public FloatingOffset Offset
    {
        get => _offset; set
        {
            if (_offset == value)
            {
                return;
            }
            _offset = value;
            if (JSAvailable && !string.IsNullOrWhiteSpace(Id))
            {
                InvokeAsync(ChangeOptionsAsync);
            }
        }
    }

    [Parameter]
    public bool Inline { get; set; }

    [Parameter]
    public EventCallback<PositionChangedEventArgs> OnPositionChanged { get; set; }

    string? ClassValue => new CssBuilder(Class)
        .AddClass("fixed", "absolute", Strategy == FloatingStrategy.Fixed)
        .Build();

    string? StyleValue => new StyleBuilder(Style)
        .AddStyle("visibility", "hidden")
        .Build();
}